{
	"info": {
		"_postman_id": "5e99831b-4010-4123-98d9-169d7939cfb2",
		"name": "API testing basics",
		"description": "# 🧪 Get started here\n\nPostman's powerful [scripting feature](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) helps you to write a range of API tests in JavaScript, including integration, regression, and contract tests.\n\nThis template demonstrates how to work with the Postman basic test syntax to test a single HTTP API request.\n\n## 🔖 How to use this template?\n\n#### Step 1: Send requests\n\nSend the sample requests and view the response and test results.\n\n#### Step 2: Update the sample request URL\n\nReplace the sample request URLs with your desired API endpoints.\n\n#### Step 3: Customize tests\n\nCustomize the tests in the \"Tests\" tab if needed. Don't forget to save your changes.\n\n## 💪 Quick tips for writing tests\n\n- Organize your test scenarios by grouping your requests in [collections](https://www.getpostman.com/docs/v6/postman/collections/intro_to_collections) and [folders](https://www.getpostman.com/docs/v6/postman/collections/managing_collections#adding-folders), and naming them descriptively\n- Document your API’s requirements using [markdown in the descriptions](https://www.getpostman.com/docs/v6/postman/collections/using_markdown_for_descriptions)\n- Use [variables](https://www.getpostman.com/docs/v6/postman/environments_and_globals/variables) to simulate more sophisticated user flows\n- Common tests that will be run after every request can be added to collection-level tests or folder-level tests\n    \n\n## 💡Related templates\n\n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54)  \n[REST API basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=ddb19591-3097-41cf-82af-c84273e56719&sourceTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54)  \n[Integration testing](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=fe506090-ca91-4340-bea9-82d2c3d2bb9a&sourceTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54)  \n[Regression testing](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=7ab0f80e-a964-46ee-b948-4a4e3a85809c&sourceTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "23172151",
		"_collection_link": "https://restless-star-588039.postman.co/workspace/New-Team-Workspace~79c3ebd6-c41b-45d3-b216-87edeba77540/collection/23172151-5e99831b-4010-4123-98d9-169d7939cfb2?action=share&source=collection_link&creator=23172151"
	},
	"item": [
		{
			"name": "connect API",
			"item": [
				{
					"name": "PrivacyTest",
					"item": [
						{
							"name": "0. testLogin with john",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let token = pm.response.json().data;",
											"pm.globals.set('Authorization', token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "isroot",
										"value": "true",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/api/root/test/token?mockId=john_doe",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"root",
										"test",
										"token"
									],
									"query": [
										{
											"key": "mockId",
											"value": "john_doe"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "0.5 john editUserProfile to semi public",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"update status to semi public\",\n    \"status\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/connect/v1/user/me/edit",
								"description": "This test is to validate the response time. This Snippet is also available on the right sidebar under `Response time is less than 200ms`."
							},
							"response": []
						},
						{
							"name": "1. john add semi-public post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									},
									{
										"key": "isRoot",
										"value": "true",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// status default set to 0\n{\n    \"status\": 1, // 0 - public, 1 - semi, 2- private\n    \"referenceId\": null,\n    \"content\": \"this is a content for testing adding posts\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/connect/v1/post",
								"description": "This test is written to validate the server performed a function as expected."
							},
							"response": []
						},
						{
							"name": "1.5 john addPost with referenceId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": 1, // 0 - public, 1 - semi, 2- private\n    \"referenceId\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/connect/v1/post",
								"description": "This test is written to validate the server performed a function as expected."
							},
							"response": []
						},
						{
							"name": "2. testLogin with Root",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let token = pm.response.json().data;",
											"pm.globals.set('Authorization', token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "isroot",
										"value": "true",
										"type": "text"
									}
								],
								"url": "http://localhost:8080/api/root/test/token"
							},
							"response": []
						},
						{
							"name": "3. ROOT unfollow john",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"url": "http://localhost:8080/api/connect/v1/unfollow/john_doe",
								"description": "This test is written to validate the server performed a function as expected."
							},
							"response": []
						},
						{
							"name": "4. getPost with userId = john_doe (should be empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/api/connect/v1/post?userId=john_doe",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"connect",
										"v1",
										"post"
									],
									"query": [
										{
											"key": "userId",
											"value": "john_doe"
										}
									]
								},
								"description": "This test is to validate the response status code. This Snippet is also available on the right sidebar under `Status code: Code in 200`."
							},
							"response": []
						},
						{
							"name": "5. ROOT follow john",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/api/connect/v1/follow/john_doe",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"connect",
										"v1",
										"follow",
										"john_doe"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "This test is written to validate the server performed a function as expected."
							},
							"response": []
						},
						{
							"name": "6. getPost with userId = john_doe (post should be retrieved)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/api/connect/v1/post?userId=john_doe",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"connect",
										"v1",
										"post"
									],
									"query": [
										{
											"key": "userId",
											"value": "john_doe"
										}
									]
								},
								"description": "This test is to validate the response status code. This Snippet is also available on the right sidebar under `Status code: Code in 200`."
							},
							"response": []
						}
					]
				},
				{
					"name": "Entity",
					"item": [
						{
							"name": "Follow",
							"item": [
								{
									"name": "followExisting",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": "http://localhost:8080/api/connect/v1/isFollowing/bob_smith",
										"description": "This test is written to validate the server performed a function as expected."
									},
									"response": []
								},
								{
									"name": "follow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8080/api/connect/v1/follow/ROOT",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"connect",
												"v1",
												"follow",
												"ROOT"
											],
											"query": [
												{
													"key": null,
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "This test is written to validate the server performed a function as expected."
									},
									"response": []
								},
								{
									"name": "unfollow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": "http://localhost:8080/api/connect/v1/unfollow/bob_smith",
										"description": "This test is written to validate the server performed a function as expected."
									},
									"response": []
								},
								{
									"name": "approve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8080/api/connect/v1/follow/request/approve/john_doe",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"connect",
												"v1",
												"follow",
												"request",
												"approve",
												"john_doe"
											],
											"query": [
												{
													"key": null,
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "This test is written to validate the server performed a function as expected."
									},
									"response": []
								},
								{
									"name": "reject",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8080/api/connect/v1/follow/request/reject/alice_smith",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"connect",
												"v1",
												"follow",
												"request",
												"reject",
												"alice_smith"
											],
											"query": [
												{
													"key": null,
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "This test is written to validate the server performed a function as expected."
									},
									"response": []
								},
								{
									"name": "remove",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8080/api/connect/v1/follow/request/remove/john_doe",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"connect",
												"v1",
												"follow",
												"request",
												"remove",
												"john_doe"
											],
											"query": [
												{
													"key": null,
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "This test is written to validate the server performed a function as expected."
									},
									"response": []
								},
								{
									"name": "approveAll",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8080/api/connect/v1/follow/request/approveAll",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"connect",
												"v1",
												"follow",
												"request",
												"approveAll"
											],
											"query": [
												{
													"key": null,
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "This test is written to validate the server performed a function as expected."
									},
									"response": []
								}
							]
						},
						{
							"name": "Star",
							"item": [
								{
									"name": "starExisting",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8080/api/connect/v1/starExisting?targetId=2&targetType=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"connect",
												"v1",
												"starExisting"
											],
											"query": [
												{
													"key": "targetId",
													"value": "2"
												},
												{
													"key": "targetType",
													"value": "1"
												}
											]
										},
										"description": "This test is written to validate the server performed a function as expected."
									},
									"response": []
								},
								{
									"name": "star",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"targetId\": 14,\n    \"targetType\": 2\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/api/connect/v1/star",
										"description": "This test is written to validate the server performed a function as expected."
									},
									"response": []
								},
								{
									"name": "unstar",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"targetId\": 1,\n    \"targetType\": 0\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/api/connect/v1/unStar",
										"description": "This test is written to validate the server performed a function as expected."
									},
									"response": []
								}
							]
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "getProjectWithTags",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "http://localhost:8080/api/connect/v1/project?tags=科技",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"connect",
												"v1",
												"project"
											],
											"query": [
												{
													"key": "tags",
													"value": "科技"
												}
											]
										},
										"description": "This test checks if it is possible to inject malicious strings as a request parameter. If your server is not handling user input properly, these strings can be interpreted by your server as SQL commands that result in leaking sensitive information or general mayhem."
									},
									"response": []
								},
								{
									"name": "getProjectById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": "http://localhost:8080/api/connect/v1/project/1",
										"description": "This test checks if it is possible to inject malicious strings as a request parameter. If your server is not handling user input properly, these strings can be interpreted by your server as SQL commands that result in leaking sensitive information or general mayhem."
									},
									"response": []
								},
								{
									"name": "addProject",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "// status default set to 0\n{\n    \"title\": \"test project\",\n    \"description\": \"this is a test project\",\n    \"tags\": \"test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/api/connect/v1/project",
										"description": "This test is written to validate the server performed a function as expected."
									},
									"response": []
								},
								{
									"name": "updateProject",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											},
											{
												"key": "isRoot",
												"value": "true",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"test update project\",\n    \"description\": \"this is a project for testing update\",\n    \"tags\": \"test,updated\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/api/connect/v1/project/38",
										"description": "This test is written to validate the server performed a function as expected."
									},
									"response": []
								}
							]
						},
						{
							"name": "User",
							"item": [
								{
									"name": "getPersonalFollwerList",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": "http://localhost:8080/api/connect/v1/user/me/followerList",
										"description": "This test checks if it is possible to inject malicious strings as a request parameter. If your server is not handling user input properly, these strings can be interpreted by your server as SQL commands that result in leaking sensitive information or general mayhem."
									},
									"response": []
								},
								{
									"name": "getPersonalFollowingList",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": "http://localhost:8080/api/connect/v1/user/me/followingList",
										"description": "This test checks if it is possible to inject malicious strings as a request parameter. If your server is not handling user input properly, these strings can be interpreted by your server as SQL commands that result in leaking sensitive information or general mayhem."
									},
									"response": []
								},
								{
									"name": "getPersonalPendingList",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": "http://localhost:8080/api/connect/v1/user/me/pendingList",
										"description": "This test checks if it is possible to inject malicious strings as a request parameter. If your server is not handling user input properly, these strings can be interpreted by your server as SQL commands that result in leaking sensitive information or general mayhem."
									},
									"response": []
								},
								{
									"name": "getUserByUserId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": "http://localhost:8080/api/connect/v1/user/ROOT",
										"description": "This test checks if it is possible to inject malicious strings as a request parameter. If your server is not handling user input properly, these strings can be interpreted by your server as SQL commands that result in leaking sensitive information or general mayhem."
									},
									"response": []
								},
								{
									"name": "queryPersonalInfo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": "http://localhost:8080/api/connect/v1/user/me",
										"description": "This test checks if it is possible to inject malicious strings as a request parameter. If your server is not handling user input properly, these strings can be interpreted by your server as SQL commands that result in leaking sensitive information or general mayhem."
									},
									"response": []
								},
								{
									"name": "editUserProfile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "// user profile of the current token will be updated\n// status default set to null\n{\n    \"description\": \"description\",\n    \"status\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/api/connect/v1/user/me/edit",
										"description": "This test is to validate the response time. This Snippet is also available on the right sidebar under `Response time is less than 200ms`."
									},
									"response": []
								}
							]
						},
						{
							"name": "Post",
							"item": [
								{
									"name": "addPost with referenceId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "// status default set to 0\n{\n    \"referenceId\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/api/connect/v1/post",
										"description": "This test is written to validate the server performed a function as expected."
									},
									"response": []
								},
								{
									"name": "addPost with status and content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											},
											{
												"key": "isRoot",
												"value": "true",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "// status default set to 0\n{\n    \"status\": 1, // 0 - public, 1 - semi, 2- private\n    \"referenceId\": null,\n    \"content\": \"this is a content for testing adding posts\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/api/connect/v1/post",
										"description": "This test is written to validate the server performed a function as expected."
									},
									"response": []
								},
								{
									"name": "updatePost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											},
											{
												"key": "isRoot",
												"value": "true",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "// status default set to null\n{\n    \"content\": \"test updating status\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/api/connect/v1/post/1",
										"description": "This test is written to validate the server performed a function as expected."
									},
									"response": []
								},
								{
									"name": "getPost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8080/api/connect/v1/post?userId=john_doe",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"connect",
												"v1",
												"post"
											],
											"query": [
												{
													"key": "userId",
													"value": "john_doe"
												}
											]
										},
										"description": "This test is to validate the response status code. This Snippet is also available on the right sidebar under `Status code: Code in 200`."
									},
									"response": []
								},
								{
									"name": "getPostById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": "http://localhost:8080/api/connect/v1/post/47",
										"description": "This test is written to validate that response payloads returned from the server are well-formed. It uses the [Tiny Validator for JSON Schema v4](http://geraintluff.github.io/tv4/).\n\nThe Postman sandbox offers a built-in tv4 validator to simplify your assertions. Use [JSON-schema](http://json-schema.org/) [draft v4](http://json-schema.org/latest/json-schema-core.html) to validate simple values and complex objects using a rich [validation vocabulary](http://json-schema.org/latest/json-schema-validation.html) ([examples](http://json-schema.org/examples.html))."
									},
									"response": []
								}
							]
						},
						{
							"name": "Comment",
							"item": [
								{
									"name": "getComment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8080/api/connect/v1/comment?userId=yangming",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"connect",
												"v1",
												"comment"
											],
											"query": [
												{
													"key": "userId",
													"value": "yangming"
												}
											]
										},
										"description": "This test is to validate the response status code. This Snippet is also available on the right sidebar under `Status code: Code in 200`."
									},
									"response": []
								},
								{
									"name": "getCommentById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": "http://localhost:8080/api/connect/v1/comment/13",
										"description": "This test is written to validate that response payloads returned from the server are well-formed. It uses the [Tiny Validator for JSON Schema v4](http://geraintluff.github.io/tv4/).\n\nThe Postman sandbox offers a built-in tv4 validator to simplify your assertions. Use [JSON-schema](http://json-schema.org/) [draft v4](http://json-schema.org/latest/json-schema-core.html) to validate simple values and complex objects using a rich [validation vocabulary](http://json-schema.org/latest/json-schema-validation.html) ([examples](http://json-schema.org/examples.html))."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "referencePostTest (for semi-public post)",
					"item": [
						{
							"name": "0. testLogin with john",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let token = pm.response.json().data;",
											"pm.globals.set('Authorization', token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "isroot",
										"value": "true",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/api/root/test/token?mockId=john_doe",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"root",
										"test",
										"token"
									],
									"query": [
										{
											"key": "mockId",
											"value": "john_doe"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1. john editUserProfile to semi public",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"update status to semi public\",\n    \"status\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/connect/v1/user/me/edit",
								"description": "This test is to validate the response time. This Snippet is also available on the right sidebar under `Response time is less than 200ms`."
							},
							"response": []
						},
						{
							"name": "2. john add semi-public post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let id = pm.response.json().data;",
											"let parsedId = parseFloat(id);",
											"",
											"pm.globals.set('postId', parsedId);",
											"console.log(parsedId)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									},
									{
										"key": "isRoot",
										"value": "true",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// status default set to 0\n{\n    \"status\": 1, // 0 - public, 1 - semi, 2- private\n    \"referenceId\": null,\n    \"content\": \"this is a content for testing adding posts\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/connect/v1/post",
								"description": "This test is written to validate the server performed a function as expected."
							},
							"response": []
						},
						{
							"name": "3. testLogin with Root",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let token = pm.response.json().data;",
											"pm.globals.set('Authorization', token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "isroot",
										"value": "true",
										"type": "text"
									}
								],
								"url": "http://localhost:8080/api/root/test/token"
							},
							"response": []
						},
						{
							"name": "4. ROOT unfollow john",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"url": "http://localhost:8080/api/connect/v1/unfollow/john_doe",
								"description": "This test is written to validate the server performed a function as expected."
							},
							"response": []
						},
						{
							"name": "5. ROOT addPost with referenceId set to the previous post (should failed)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": 1, // 0 - public, 1 - semi, 2- private\n    \"referenceId\": {{postId}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/connect/v1/post",
								"description": "This test is written to validate the server performed a function as expected."
							},
							"response": []
						},
						{
							"name": "6. ROOT follow john",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/api/connect/v1/follow/john_doe",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"connect",
										"v1",
										"follow",
										"john_doe"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "This test is written to validate the server performed a function as expected."
							},
							"response": []
						},
						{
							"name": "7. testLogin with john",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let token = pm.response.json().data;",
											"pm.globals.set('Authorization', token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "isroot",
										"value": "true",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/api/root/test/token?mockId=john_doe",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"root",
										"test",
										"token"
									],
									"query": [
										{
											"key": "mockId",
											"value": "john_doe"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "8. john editUserProfile to public (ROOT should follow john afterwards)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"update status to public\",\n    \"status\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/connect/v1/user/me/edit",
								"description": "This test is to validate the response time. This Snippet is also available on the right sidebar under `Response time is less than 200ms`."
							},
							"response": []
						},
						{
							"name": "9. testLogin with Root",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let token = pm.response.json().data;",
											"pm.globals.set('Authorization', token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "isroot",
										"value": "true",
										"type": "text"
									}
								],
								"url": "http://localhost:8080/api/root/test/token"
							},
							"response": []
						},
						{
							"name": "10. ROOT addPost with referenceId set to the previous post (should passed)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let id = pm.response.json().data;",
											"let parsedId = parseFloat(id);",
											"",
											"pm.globals.set('postId', parsedId);",
											"console.log(parsedId)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": 1, // 0 - public, 1 - semi, 2- private\n    \"referenceId\": {{postId}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/connect/v1/post",
								"description": "This test is written to validate the server performed a function as expected."
							},
							"response": []
						},
						{
							"name": "11. getPostById of the previous post (reference post should be retrieved)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"url": "http://localhost:8080/api/connect/v1/post/{{postId}}",
								"description": "This test is to validate the response status code. This Snippet is also available on the right sidebar under `Status code: Code in 200`."
							},
							"response": []
						}
					]
				},
				{
					"name": "0. testLogin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let token = pm.response.json().data;",
									"pm.globals.set('Authorization', token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "isroot",
								"value": "true",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/api/root/test/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"root",
								"test",
								"token"
							],
							"query": [
								{
									"key": "mockId",
									"value": "john_doe",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1. get verification code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/connect/v1/public/verification/email?email=leduoyoung@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"connect",
								"v1",
								"public",
								"verification",
								"email"
							],
							"query": [
								{
									"key": "email",
									"value": "leduoyoung@gmail.com"
								}
							]
						},
						"description": "This test is written to validate that response payloads returned from the server are well-formed. It uses the [Tiny Validator for JSON Schema v4](http://geraintluff.github.io/tv4/).\n\nThe Postman sandbox offers a built-in tv4 validator to simplify your assertions. Use [JSON-schema](http://json-schema.org/) [draft v4](http://json-schema.org/latest/json-schema-core.html) to validate simple values and complex objects using a rich [validation vocabulary](http://json-schema.org/latest/json-schema-validation.html) ([examples](http://json-schema.org/examples.html))."
					},
					"response": []
				},
				{
					"name": "2. verify email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"leduoyoung@gmail.com\",\n    \"code\": \"abacc\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/api/connect/v1/public/verification/email",
						"description": "This test is written to validate that response payloads returned from the server are well-formed. It uses the [Tiny Validator for JSON Schema v4](http://geraintluff.github.io/tv4/).\n\nThe Postman sandbox offers a built-in tv4 validator to simplify your assertions. Use [JSON-schema](http://json-schema.org/) [draft v4](http://json-schema.org/latest/json-schema-core.html) to validate simple values and complex objects using a rich [validation vocabulary](http://json-schema.org/latest/json-schema-validation.html) ([examples](http://json-schema.org/examples.html))."
					},
					"response": []
				},
				{
					"name": "3. signup",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"leduoyang\",\n  \"password\": \"thisispassword\",\n  \"description\": \"uid is acquired from the response of verifying email\",\n  \"email\": \"leduoyoung@gmail.com\",\n  \"uid\": \"32e55c14-3cb7-42ad-849d-edaaeeec7917\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/api/connect/v1/public/user/signup"
					},
					"response": []
				},
				{
					"name": "4. login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// follow step 1, 2, 3 to signUp and signIn to get jwt token for further requests (token should be added to headers as Authorziation)\n// otherwise, use step 0 to acquire token for testing purposes\n{\n  \"userId\": \"leduoyang\",\n  \"password\": \"thisispassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/api/connect/v1/public/user/signin"
					},
					"response": []
				},
				{
					"name": "uploadProfileImage",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/yangleduo/Desktop/台胞证正面.png"
								}
							]
						},
						"url": "http://localhost:8080/api/connect/v1/user/upload/profileImage"
					},
					"response": []
				}
			],
			"description": "This folder contains examples of testing a single HTTP API request.\n\nIn the Postman app, under the \"Tests\" tab for each request, notice the test(s) written to validate specific assertions. Some of these tests are available as a \"Snippet\" on the right sidebar.\n\nSend each request to see the results under the \"Test Results\" tab in the response viewer.",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Authorization",
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}