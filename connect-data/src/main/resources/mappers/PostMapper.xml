<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.connect.data.dao.IPostDao">
    <resultMap id="postResultMap" type="com.connect.data.entity.Post">
        <id property="id" column="id"/>
        <result property="content" column="content"/>
        <result property="referenceId" column="referenceId"/>
        <result property="tags" column="tag"/>
        <result property="stars" column="stars"/>
        <result property="views" column="views"/>
        <result property="createdUser" column="created_user"/>
        <result property="updatedUser" column="updated_user"/>
        <result property="dbCreateTime" column="db_create_time"/>
        <result property="dbModifyTime" column="db_modify_time"/>
    </resultMap>

    <insert id="createPost" parameterType="com.connect.data.entity.Post" useGeneratedKeys="true"
            keyProperty="id" keyColumn="id">
        INSERT INTO post(content, referenceId, tags, status, created_user, updated_user)
        VALUES (#{content, jdbcType=VARCHAR},
        #{referenceId,jdbcType=BIGINT},
        #{tags,jdbcType=VARCHAR},
        #{status,jdbcType=TINYINT},
        #{createdUser,jdbcType=BIGINT},
        #{updatedUser,jdbcType=BIGINT}
        )
    </insert>

    <update id="updatePost" parameterType="com.connect.data.entity.Post">
        UPDATE post
        <trim prefix="set" suffixOverrides=",">
            updated_user = #{updatedUser, jdbcType=BIGINT},
            <if test="content != null and content != ''">
                content = #{content, jdbcType=VARCHAR},
            </if>
            <if test="referenceId != null and referenceId > 0">
                referenceId = #{referenceId, jdbcType=BIGINT},
            </if>
            <if test="tags != null and tags != ''">
                tags = #{tags, jdbcType=VARCHAR},
            </if>
            <if test="status != null and status >= 0">
                status = #{status,jdbcType=TINYINT}
            </if>
        </trim>
        WHERE id = #{id, jdbcType=BIGINT}
    </update>

    <update id="incrementViews">
        UPDATE post
        SET version = version + 1,
        views = views + 1
        WHERE id = #{id, jdbcType=BIGINT} AND version = #{version, jdbcType=BIGINT}
    </update>

    <update id="refreshStars">
        UPDATE post
        SET version = version + 1,
        stars = #{stars, jdbcType=BIGINT}
        WHERE id = #{id, jdbcType=BIGINT} AND version = #{version, jdbcType=BIGINT}
    </update>

    <delete id="deletePost">
        UPDATE post
        SET `status` = 3,
        updated_user = #{updatedUser, jdbcType=BIGINT}
        WHERE id = #{id, jdbcType=BIGINT}
    </delete>

    <select id="queryPostById" resultMap="postResultMap">
        SELECT id, content, referenceId, tags, stars, views, version, created_user, updated_user, db_create_time,
        db_modify_time

        FROM post
        WHERE id = #{id}
        AND (
        status = 0
        OR (status = 1
        AND created_user IN (SELECT followingId FROM follow WHERE followerId = #{userId} AND status = 2 ) )
        OR (status != 3 AND created_user = #{userId} )
        )
    </select>

    <select id="internalQueryPostById" resultMap="postResultMap">
        SELECT id, content, referenceId, tags, stars, views, version, created_user, updated_user, db_create_time,
        db_modify_time

        FROM post
        WHERE id = #{id}
    </select>

    <select id="queryPost" resultMap="postResultMap">
        SELECT id, content, referenceId, tags, stars, views, version, created_user, updated_user, db_create_time,
        db_modify_time

        FROM post
        WHERE 1=1
        <if test="keyword != null and keyword != ''">
            AND content LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="tags != null and tags != ''">
            AND find_in_set(#{tags}, tags) &gt; 0
        </if>
        AND (
        status = 0
        OR (status = 1
        AND created_user IN (SELECT followingId FROM follow WHERE followerId = #{userId} AND status = 2 ) )
        OR (status != 3 AND created_user = #{userId} )
        )
        ORDER BY db_modify_time DESC, db_create_time DESC
    </select>

    <select id="postExisting" resultType="java.lang.Boolean">
        SELECT EXISTS(
        SELECT id
        FROM post
        WHERE id = #{id, jdbcType=BIGINT} AND created_user = #{userId, jdbcType=BIGINT} AND status != 3
        )
    </select>
</mapper>
